{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar _has = require('has');\nvar channel = require('side-channel')();\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar SLOT = {\n  assert: function assert(O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    channel.assert(O);\n    if (!SLOT.has(O, slot)) {\n      throw new $TypeError('`' + slot + '` is not present on `O`');\n    }\n  },\n  get: function get(O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    return slots && slots['$' + slot];\n  },\n  has: function has(O, slot) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    return !!slots && _has(slots, '$' + slot);\n  },\n  set: function set(O, slot, V) {\n    if (!O || typeof O !== 'object' && typeof O !== 'function') {\n      throw new $TypeError('`O` is not an object');\n    }\n    if (typeof slot !== 'string') {\n      throw new $TypeError('`slot` must be a string');\n    }\n    var slots = channel.get(O);\n    if (!slots) {\n      slots = {};\n      channel.set(O, slots);\n    }\n    slots['$' + slot] = V;\n  }\n};\nif (Object.freeze) {\n  Object.freeze(SLOT);\n}\nmodule.exports = SLOT;","map":null,"metadata":{},"sourceType":"script"}