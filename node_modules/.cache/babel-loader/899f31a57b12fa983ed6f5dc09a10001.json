{"ast":null,"code":"import _classCallCheck from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove as _remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nvar StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, StorageFileApi);\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              _context.next = 8;\n              return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), Object.assign({\n                method: method,\n                body: body,\n                headers: headers\n              }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n                duplex: options.duplex\n              } : {}));\n            case 8:\n              res = _context.sent;\n              if (!res.ok) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 13:\n              _context.next = 15;\n              return res.json();\n            case 15:\n              error = _context.sent;\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 17:\n              _context.next = 24;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              if (!isStorageError(_context.t0)) {\n                _context.next = 23;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: _context.t0\n              });\n            case 23:\n              throw _context.t0;\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"uploadToSignedUrl\",\n    value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var cleanPath, _path, url, body, options, headers, res, error;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n              url.searchParams.set('token', token);\n              _context3.prev = 4;\n              options = Object.assign({\n                upsert: DEFAULT_FILE_OPTIONS.upsert\n              }, fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              _context3.next = 10;\n              return this.fetch(url.toString(), {\n                method: 'PUT',\n                body: body,\n                headers: headers\n              });\n            case 10:\n              res = _context3.sent;\n              if (!res.ok) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 15:\n              _context3.next = 17;\n              return res.json();\n            case 17:\n              error = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 19:\n              _context3.next = 26;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](4);\n              if (!isStorageError(_context3.t0)) {\n                _context3.next = 25;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: _context3.t0\n              });\n            case 25:\n              throw _context3.t0;\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 21]]);\n      }));\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n  }, {\n    key: \"createSignedUploadUrl\",\n    value: function createSignedUploadUrl(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _path, data, url, token;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _path = this._getFinalPath(path);\n              _context4.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n                headers: this.headers\n              });\n            case 4:\n              data = _context4.sent;\n              url = new URL(this.url + data.url);\n              token = url.searchParams.get('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              throw new StorageError('No token returned by API');\n            case 9:\n              return _context4.abrupt(\"return\", {\n                data: {\n                  signedUrl: url.toString(),\n                  path: path,\n                  token: token\n                },\n                error: null\n              });\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!isStorageError(_context4.t0)) {\n                _context4.next = 16;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                data: null,\n                error: _context4.t0\n              });\n            case 16:\n              throw _context4.t0;\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context6.prev = 7;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!isStorageError(_context6.t0)) {\n                _context6.next = 11;\n                break;\n              }\n              return _context6.abrupt(\"return\", {\n                data: null,\n                error: _context6.t0\n              });\n            case 11:\n              throw _context6.t0;\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", {\n                data: {\n                  path: data.Key\n                },\n                error: null\n              });\n            case 7:\n              _context7.prev = 7;\n              _context7.t0 = _context7[\"catch\"](0);\n              if (!isStorageError(_context7.t0)) {\n                _context7.next = 11;\n                break;\n              }\n              return _context7.abrupt(\"return\", {\n                data: null,\n                error: _context7.t0\n              });\n            case 11:\n              throw _context7.t0;\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, data, downloadQueryParam, signedUrl;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _path = this._getFinalPath(path);\n              _context8.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n                expiresIn: expiresIn\n              }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n                transform: options.transform\n              } : {}), {\n                headers: this.headers\n              });\n            case 4:\n              data = _context8.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n              data = {\n                signedUrl: signedUrl\n              };\n              return _context8.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 11:\n              _context8.prev = 11;\n              _context8.t0 = _context8[\"catch\"](0);\n              if (!isStorageError(_context8.t0)) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"return\", {\n                data: null,\n                error: _context8.t0\n              });\n            case 15:\n              throw _context8.t0;\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this = this;\n        var data, downloadQueryParam;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                expiresIn: expiresIn,\n                paths: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context9.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              return _context9.abrupt(\"return\", {\n                data: data.map(function (datum) {\n                  return Object.assign(Object.assign({}, datum), {\n                    signedUrl: datum.signedURL ? encodeURI(\"\".concat(_this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n                  });\n                }),\n                error: null\n              });\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](0);\n              if (!isStorageError(_context9.t0)) {\n                _context9.next = 12;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: null,\n                error: _context9.t0\n              });\n            case 12:\n              throw _context9.t0;\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"download\",\n    value: function download(path, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var wantsTransformation, renderPath, transformationQuery, queryString, _path, res, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n              renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n              transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n              queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n              _context10.prev = 4;\n              _path = this._getFinalPath(path);\n              _context10.next = 8;\n              return get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n                headers: this.headers,\n                noResolveJson: true\n              });\n            case 8:\n              res = _context10.sent;\n              _context10.next = 11;\n              return res.blob();\n            case 11:\n              data = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 15:\n              _context10.prev = 15;\n              _context10.t0 = _context10[\"catch\"](4);\n              if (!isStorageError(_context10.t0)) {\n                _context10.next = 19;\n                break;\n              }\n              return _context10.abrupt(\"return\", {\n                data: null,\n                error: _context10.t0\n              });\n            case 19:\n              throw _context10.t0;\n            case 20:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[4, 15]]);\n      }));\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path, options) {\n      var _path = this._getFinalPath(path);\n      var _queryString = [];\n      var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      var renderPath = wantsTransformation ? 'render/image' : 'object';\n      var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      var queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = \"?\".concat(queryString);\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                prefixes: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context11.sent;\n              return _context11.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context11.prev = 7;\n              _context11.t0 = _context11[\"catch\"](0);\n              if (!isStorageError(_context11.t0)) {\n                _context11.next = 11;\n                break;\n              }\n              return _context11.abrupt(\"return\", {\n                data: null,\n                error: _context11.t0\n              });\n            case 11:\n              throw _context11.t0;\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                prefix: path || ''\n              });\n              _context12.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                headers: this.headers\n              }, parameters);\n            case 4:\n              data = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 8:\n              _context12.prev = 8;\n              _context12.t0 = _context12[\"catch\"](0);\n              if (!isStorageError(_context12.t0)) {\n                _context12.next = 12;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: null,\n                error: _context12.t0\n              });\n            case 12:\n              throw _context12.t0;\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }, {\n    key: \"transformOptsToQueryString\",\n    value: function transformOptsToQueryString(transform) {\n      var params = [];\n      if (transform.width) {\n        params.push(\"width=\".concat(transform.width));\n      }\n      if (transform.height) {\n        params.push(\"height=\".concat(transform.height));\n      }\n      if (transform.resize) {\n        params.push(\"resize=\".concat(transform.resize));\n      }\n      if (transform.format) {\n        params.push(\"format=\".concat(transform.format));\n      }\n      if (transform.quality) {\n        params.push(\"quality=\".concat(transform.quality));\n      }\n      return params.join('&');\n    }\n  }]);\n  return StorageFileApi;\n}();\nexport { StorageFileApi as default };","map":null,"metadata":{},"sourceType":"module"}