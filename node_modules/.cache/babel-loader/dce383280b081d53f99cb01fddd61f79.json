{"ast":null,"code":"import _classCallCheck from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  /**\n   * listen to Postgres changes.\n   */\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nvar RealtimeChannel = /*#__PURE__*/function () {\n  function RealtimeChannel( /** Topic name can be any string. */\n  topic) {\n    var _this = this;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    var socket = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, RealtimeChannel);\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(function () {\n      return _this._rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', function () {\n      _this.state = CHANNEL_STATES.joined;\n      _this.rejoinTimer.reset();\n      _this.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this.pushBuffer = [];\n    });\n    this._onClose(function () {\n      _this.rejoinTimer.reset();\n      _this.socket.log('channel', \"close \".concat(_this.topic, \" \").concat(_this._joinRef()));\n      _this.state = CHANNEL_STATES.closed;\n      _this.socket._remove(_this);\n    });\n    this._onError(function (reason) {\n      if (_this._isLeaving() || _this._isClosed()) {\n        return;\n      }\n      _this.socket.log('channel', \"error \".concat(_this.topic), reason);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', function () {\n      if (!_this._isJoining()) {\n        return;\n      }\n      _this.socket.log('channel', \"timeout \".concat(_this.topic), _this.joinPush.timeout);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, function (payload, ref) {\n      _this._trigger(_this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n  /** Subscribe registers your client with the server */\n  _createClass(RealtimeChannel, [{\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this2 = this;\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timeout;\n      var _a, _b;\n      if (this.joinedOnce) {\n        throw \"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance\";\n      } else {\n        var _this$params$config = this.params.config,\n          broadcast = _this$params$config.broadcast,\n          presence = _this$params$config.presence;\n        this._onError(function (e) {\n          return callback && callback('CHANNEL_ERROR', e);\n        });\n        this._onClose(function () {\n          return callback && callback('CLOSED');\n        });\n        var accessTokenPayload = {};\n        var config = {\n          broadcast: broadcast,\n          presence: presence,\n          postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(function (r) {\n            return r.filter;\n          })) !== null && _b !== void 0 ? _b : []\n        };\n        if (this.socket.accessToken) {\n          accessTokenPayload.access_token = this.socket.accessToken;\n        }\n        this.updateJoinPayload(Object.assign({\n          config: config\n        }, accessTokenPayload));\n        this.joinedOnce = true;\n        this._rejoin(timeout);\n        this.joinPush.receive('ok', function (_ref2) {\n          var serverPostgresFilters = _ref2.postgres_changes;\n          var _a;\n          _this2.socket.accessToken && _this2.socket.setAuth(_this2.socket.accessToken);\n          if (serverPostgresFilters === undefined) {\n            callback && callback('SUBSCRIBED');\n            return;\n          } else {\n            var clientPostgresBindings = _this2.bindings.postgres_changes;\n            var bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n            var newPostgresBindings = [];\n            for (var i = 0; i < bindingsLen; i++) {\n              var clientPostgresBinding = clientPostgresBindings[i];\n              var _clientPostgresBindin = clientPostgresBinding.filter,\n                event = _clientPostgresBindin.event,\n                schema = _clientPostgresBindin.schema,\n                table = _clientPostgresBindin.table,\n                filter = _clientPostgresBindin.filter;\n              var serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n              if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n                newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                  id: serverPostgresFilter.id\n                }));\n              } else {\n                _this2.unsubscribe();\n                callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                return;\n              }\n            }\n            _this2.bindings.postgres_changes = newPostgresBindings;\n            callback && callback('SUBSCRIBED');\n            return;\n          }\n        }).receive('error', function (error) {\n          callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n          return;\n        }).receive('timeout', function () {\n          callback && callback('TIMED_OUT');\n          return;\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"presenceState\",\n    value: function presenceState() {\n      return this.presence.state;\n    }\n  }, {\n    key: \"track\",\n    value: function track(payload) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.send({\n                type: 'presence',\n                event: 'track',\n                payload: payload\n              }, opts.timeout || this.timeout);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"untrack\",\n    value: function untrack() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.send({\n                type: 'presence',\n                event: 'untrack'\n              }, opts);\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, filter, callback) {\n      return this._on(type, filter, callback);\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var _this3 = this;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve) {\n        var _a, _b, _c;\n        var push = _this3._push(payload.type, payload, opts.timeout || _this3.timeout);\n        if (push.rateLimited) {\n          resolve('rate limited');\n        }\n        if (payload.type === 'broadcast' && !((_c = (_b = (_a = _this3.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n          resolve('ok');\n        }\n        push.receive('ok', function () {\n          return resolve('ok');\n        });\n        push.receive('timeout', function () {\n          return resolve('timed out');\n        });\n      });\n    }\n  }, {\n    key: \"updateJoinPayload\",\n    value: function updateJoinPayload(payload) {\n      this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this4 = this;\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this4.socket.log('channel', \"leave \".concat(_this4.topic));\n        _this4._trigger(CHANNEL_EVENTS.close, 'leave', _this4._joinRef());\n      };\n      this.rejoinTimer.reset();\n      // Destroy joinPush to avoid connection timeouts during unscription phase\n      this.joinPush.destroy();\n      return new Promise(function (resolve) {\n        var leavePush = new Push(_this4, CHANNEL_EVENTS.leave, {}, timeout);\n        leavePush.receive('ok', function () {\n          onClose();\n          resolve('ok');\n        }).receive('timeout', function () {\n          onClose();\n          resolve('timed out');\n        }).receive('error', function () {\n          resolve('error');\n        });\n        leavePush.send();\n        if (!_this4._canPush()) {\n          leavePush.trigger('ok', {});\n        }\n      });\n    } /** @internal */\n  }, {\n    key: \"_push\",\n    value: function _push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n      if (!this.joinedOnce) {\n        throw \"tried to push '\".concat(event, \"' to '\").concat(this.topic, \"' before joining. Use channel.subscribe() before pushing events\");\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this._canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n      return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(_event, payload, _ref) {\n      return payload;\n    } /** @internal */\n  }, {\n    key: \"_isMember\",\n    value: function _isMember(topic) {\n      return this.topic === topic;\n    } /** @internal */\n  }, {\n    key: \"_joinRef\",\n    value: function _joinRef() {\n      return this.joinPush.ref;\n    } /** @internal */\n  }, {\n    key: \"_trigger\",\n    value: function _trigger(type, payload, ref) {\n      var _this5 = this;\n      var _a, _b;\n      var typeLower = type.toLocaleLowerCase();\n      var close = CHANNEL_EVENTS.close,\n        error = CHANNEL_EVENTS.error,\n        leave = CHANNEL_EVENTS.leave,\n        join = CHANNEL_EVENTS.join;\n      var events = [close, error, leave, join];\n      if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n        return;\n      }\n      var handledPayload = this._onMessage(typeLower, payload, ref);\n      if (payload && !handledPayload) {\n        throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n      }\n      if (['insert', 'update', 'delete'].includes(typeLower)) {\n        (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(function (bind) {\n          var _a, _b, _c;\n          return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n        }).map(function (bind) {\n          return bind.callback(handledPayload, ref);\n        });\n      } else {\n        (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(function (bind) {\n          var _a, _b, _c, _d, _e, _f;\n          if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n            if ('id' in bind) {\n              var bindId = bind.id;\n              var bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n              return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n            } else {\n              var _bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n              return _bindEvent === '*' || _bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower;\n          }\n        }).map(function (bind) {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            var postgresChanges = handledPayload.data;\n            var schema = postgresChanges.schema,\n              table = postgresChanges.table,\n              commit_timestamp = postgresChanges.commit_timestamp,\n              _type = postgresChanges.type,\n              errors = postgresChanges.errors;\n            var enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: _type,\n              new: {},\n              old: {},\n              errors: errors\n            };\n            handledPayload = Object.assign(Object.assign({}, enrichedPayload), _this5._getPayloadRecords(postgresChanges));\n          }\n          bind.callback(handledPayload, ref);\n        });\n      }\n    } /** @internal */\n  }, {\n    key: \"_isClosed\",\n    value: function _isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    } /** @internal */\n  }, {\n    key: \"_isJoined\",\n    value: function _isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    } /** @internal */\n  }, {\n    key: \"_isJoining\",\n    value: function _isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    } /** @internal */\n  }, {\n    key: \"_isLeaving\",\n    value: function _isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    } /** @internal */\n  }, {\n    key: \"_replyEventName\",\n    value: function _replyEventName(ref) {\n      return \"chan_reply_\".concat(ref);\n    } /** @internal */\n  }, {\n    key: \"_on\",\n    value: function _on(type, filter, callback) {\n      var typeLower = type.toLocaleLowerCase();\n      var binding = {\n        type: typeLower,\n        filter: filter,\n        callback: callback\n      };\n      if (this.bindings[typeLower]) {\n        this.bindings[typeLower].push(binding);\n      } else {\n        this.bindings[typeLower] = [binding];\n      }\n      return this;\n    } /** @internal */\n  }, {\n    key: \"_off\",\n    value: function _off(type, filter) {\n      var typeLower = type.toLocaleLowerCase();\n      this.bindings[typeLower] = this.bindings[typeLower].filter(function (bind) {\n        var _a;\n        return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n      return this;\n    } /** @internal */\n  }, {\n    key: \"_rejoinUntilConnected\",\n    /** @internal */value: function _rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this._rejoin();\n      }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(callback) {\n      this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(callback) {\n      this._on(CHANNEL_EVENTS.error, {}, function (reason) {\n        return callback(reason);\n      });\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_canPush\",\n    value: function _canPush() {\n      return this.socket.isConnected() && this._isJoined();\n    } /** @internal */\n  }, {\n    key: \"_rejoin\",\n    value: function _rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      if (this._isLeaving()) {\n        return;\n      }\n      this.socket._leaveOpenTopic(this.topic);\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    } /** @internal */\n  }, {\n    key: \"_getPayloadRecords\",\n    value: function _getPayloadRecords(payload) {\n      var records = {\n        new: {},\n        old: {}\n      };\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records.new = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n      return records;\n    }\n  }], [{\n    key: \"isEqual\",\n    value: function isEqual(obj1, obj2) {\n      if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n        return false;\n      }\n      for (var k in obj1) {\n        if (obj1[k] !== obj2[k]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n  return RealtimeChannel;\n}();\nexport { RealtimeChannel as default };","map":null,"metadata":{},"sourceType":"module"}