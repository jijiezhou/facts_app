{"ast":null,"code":"import _toConsumableArray from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zj/projects/facts_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nvar RealtimePresence = /*#__PURE__*/function () {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  function RealtimePresence(channel, opts) {\n    var _this = this;\n    _classCallCheck(this, RealtimePresence);\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function onJoin() {},\n      onLeave: function onLeave() {},\n      onSync: function onSync() {}\n    };\n    var events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel._on(events.state, {}, function (newState) {\n      var _this$caller = _this.caller,\n        onJoin = _this$caller.onJoin,\n        onLeave = _this$caller.onLeave,\n        onSync = _this$caller.onSync;\n      _this.joinRef = _this.channel._joinRef();\n      _this.state = RealtimePresence.syncState(_this.state, newState, onJoin, onLeave);\n      _this.pendingDiffs.forEach(function (diff) {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n      });\n      _this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel._on(events.diff, {}, function (diff) {\n      var _this$caller2 = _this.caller,\n        onJoin = _this$caller2.onJoin,\n        onLeave = _this$caller2.onLeave,\n        onSync = _this$caller2.onSync;\n      if (_this.inPendingSyncState()) {\n        _this.pendingDiffs.push(diff);\n      } else {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n    this.onJoin(function (key, currentPresences, newPresences) {\n      _this.channel._trigger('presence', {\n        event: 'join',\n        key: key,\n        currentPresences: currentPresences,\n        newPresences: newPresences\n      });\n    });\n    this.onLeave(function (key, currentPresences, leftPresences) {\n      _this.channel._trigger('presence', {\n        event: 'leave',\n        key: key,\n        currentPresences: currentPresences,\n        leftPresences: leftPresences\n      });\n    });\n    this.onSync(function () {\n      _this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  _createClass(RealtimePresence, [{\n    key: \"onJoin\",\n    /** @internal */value: function onJoin(callback) {\n      this.caller.onJoin = callback;\n    } /** @internal */\n  }, {\n    key: \"onLeave\",\n    value: function onLeave(callback) {\n      this.caller.onLeave = callback;\n    } /** @internal */\n  }, {\n    key: \"onSync\",\n    value: function onSync(callback) {\n      this.caller.onSync = callback;\n    } /** @internal */\n  }, {\n    key: \"inPendingSyncState\",\n    value: function inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n  }], [{\n    key: \"syncState\",\n    value: function syncState(currentState, newState, onJoin, onLeave) {\n      var state = this.cloneDeep(currentState);\n      var transformedState = this.transformState(newState);\n      var joins = {};\n      var leaves = {};\n      this.map(state, function (key, presences) {\n        if (!transformedState[key]) {\n          leaves[key] = presences;\n        }\n      });\n      this.map(transformedState, function (key, newPresences) {\n        var currentPresences = state[key];\n        if (currentPresences) {\n          var newPresenceRefs = newPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresenceRefs = currentPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var joinedPresences = newPresences.filter(function (m) {\n            return curPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          var leftPresences = currentPresences.filter(function (m) {\n            return newPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          if (joinedPresences.length > 0) {\n            joins[key] = joinedPresences;\n          }\n          if (leftPresences.length > 0) {\n            leaves[key] = leftPresences;\n          }\n        } else {\n          joins[key] = newPresences;\n        }\n      });\n      return this.syncDiff(state, {\n        joins: joins,\n        leaves: leaves\n      }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n  }, {\n    key: \"syncDiff\",\n    value: function syncDiff(state, diff, onJoin, onLeave) {\n      var _this2 = this;\n      var _joins$leaves = {\n          joins: this.transformState(diff.joins),\n          leaves: this.transformState(diff.leaves)\n        },\n        joins = _joins$leaves.joins,\n        leaves = _joins$leaves.leaves;\n      if (!onJoin) {\n        onJoin = function onJoin() {};\n      }\n      if (!onLeave) {\n        onLeave = function onLeave() {};\n      }\n      this.map(joins, function (key, newPresences) {\n        var _a;\n        var currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n        state[key] = _this2.cloneDeep(newPresences);\n        if (currentPresences.length > 0) {\n          var _state$key;\n          var joinedPresenceRefs = state[key].map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresences = currentPresences.filter(function (m) {\n            return joinedPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          (_state$key = state[key]).unshift.apply(_state$key, _toConsumableArray(curPresences));\n        }\n        onJoin(key, currentPresences, newPresences);\n      });\n      this.map(leaves, function (key, leftPresences) {\n        var currentPresences = state[key];\n        if (!currentPresences) return;\n        var presenceRefsToRemove = leftPresences.map(function (m) {\n          return m.presence_ref;\n        });\n        currentPresences = currentPresences.filter(function (m) {\n          return presenceRefsToRemove.indexOf(m.presence_ref) < 0;\n        });\n        state[key] = currentPresences;\n        onLeave(key, currentPresences, leftPresences);\n        if (currentPresences.length === 0) delete state[key];\n      });\n      return state;\n    } /** @internal */\n  }, {\n    key: \"map\",\n    value: function map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(function (key) {\n        return func(key, obj[key]);\n      });\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n  }, {\n    key: \"transformState\",\n    value: function transformState(state) {\n      state = this.cloneDeep(state);\n      return Object.getOwnPropertyNames(state).reduce(function (newState, key) {\n        var presences = state[key];\n        if ('metas' in presences) {\n          newState[key] = presences.metas.map(function (presence) {\n            presence['presence_ref'] = presence['phx_ref'];\n            delete presence['phx_ref'];\n            delete presence['phx_ref_prev'];\n            return presence;\n          });\n        } else {\n          newState[key] = presences;\n        }\n        return newState;\n      }, {});\n    } /** @internal */\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }]);\n  return RealtimePresence;\n}();\nexport { RealtimePresence as default };","map":null,"metadata":{},"sourceType":"module"}